return {BaseBow = [=[local tbl = {}

function tbl.new(shar)
	local _charge_attachment = shar.Model:FindFirstChild("_bow_charge", true)
	local _charge_particles = {}
	local _visibility_delayed = nil

	local arg1 = {
	_charge_attachment = _charge_attachment, 
	_charge_particles = _charge_particles, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayChargeSound(, arg2) -- Line 28
		arg1:CreateSound("rbxassetid://13744359504", 1, 0.75 + 0.25 * arg2, true, 10)
	end

	function arg1.PlayChargeEffect(, arg2) -- Line 32
		arg1:PlayChargeSound(arg2)
		for _, v in pairs(arg1._charge_particles) do
			v.Color = ColorSequence.new(arg1.ClientItem:GetChargeColor(arg2))
			v:Emit(1)
		end
	end

	function arg1._UpdateArrow() -- Line 45
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var29
		if var29 then
		else
			var29 = true
			if 0 >= arg1.ClientItem:Get("Ammo") then
				var29 = arg1:IsAnimationPlaying("Reload")
				if not var29 then
					var29 = arg1:IsAnimationPlaying("Shoot1")
					if not var29 then
						var29 = arg1:IsAnimationPlaying("ChargeRelease")
						if var29 then
							if 0 >= arg1.ClientItem:Get("AmmoReserve") then
								var29 = false
							else
								var29 = true
							end
						end
					end
				end
			end
			if var29 then
				if not arg1._visibility_delayed then
					arg1._visibility_delayed = true
					wait(0.1)
					arg1:_UpdateArrow()
					return
				end
			end
			local var30
			if arg1._charm_pivot_attachment then
				local function INLINED_2() -- Internal function, doesn't exist in bytecode
					var30 = arg1._charm_attachment_parent
					return var30
				end
				if not var29 or not INLINED_2() then
					var30 = nil
				end
				arg1._charm_pivot_attachment.Parent = var30
			end
			if var29 then
			else
			end
			for _, v_3 in pairs(arg1._registered_ammo_visuals) do
				arg1:_LocalTransparencyModifier(v_3, "AmmoVisual", 1)
			end
			arg1._visibility_delayed = nil
		end
	end

	function arg1._RegisterAmmoVisual(, arg2) -- Line 75
		table.insert(arg1._registered_ammo_visuals, arg2)
	end

	function arg1._Setup() -- Line 79
		--[[ Upvalues[1]:
			[1]: BowChargeEffects_upvr (readonly)
		]]
		local SOME = BowChargeEffects_upvr:FindFirstChild(arg1.Name)
		if not SOME then
			SOME = BowChargeEffects_upvr.Default
		end
		for _, v_2 in pairs(SOME.Attachment:GetChildren()) do
			local clone = v_2:Clone()
			clone.Parent = arg1._charge_attachment
			table.insert(arg1._charge_particles, clone)
		end
	end

	function arg1._Init() -- Line 87
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 88
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateArrow()
		end)
		arg1.AnimationPlayed:Connect(function() -- Line 92
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateArrow()
		end)
		arg1.AnimationStopped:Connect(function() -- Line 96
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateArrow()
		end)
		arg1:_Setup()
		task.spawn(arg1._UpdateArrow, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Bow = [=[local tbl = {}

function tbl.new(shar)
	local _charge_attachment = shar.Model:FindFirstChild("_bow_charge", true)
	local _charge_particles = {}
	local _visibility_delayed = nil

	local arg1 = {
	_charge_attachment = _charge_attachment, 
	_charge_particles = _charge_particles, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Feather"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Raven Bow = [=[local tbl = {}

function tbl.new(shar)
	local _charge_attachment = shar.Model:FindFirstChild("_bow_charge", true)
	local _charge_particles = {}
	local _visibility_delayed = nil

	local arg1 = {
	_charge_attachment = _charge_attachment, 
	_charge_particles = _charge_particles, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Feather1"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Feather2"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Compound Bow = [=[local tbl = {}

function tbl.new(shar)
	local _charge_attachment = shar.Model:FindFirstChild("_bow_charge", true)
	local _charge_particles = {}
	local _visibility_delayed = nil

	local arg1 = {
	_charge_attachment = _charge_attachment, 
	_charge_particles = _charge_particles, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Bat Bow = [=[local tbl = {}

function tbl.new(shar)
	local _charge_attachment = shar.Model:FindFirstChild("_bow_charge", true)
	local _charge_particles = {}
	local _visibility_delayed = nil

	local arg1 = {
	_charge_attachment = _charge_attachment, 
	_charge_particles = _charge_particles, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayChargeSound(, arg2) -- Line 20
		--[[ Upvalues[1]:
			[1]: BaseBow_upvr (readonly)
		]]
		BaseBow_upvr.PlayChargeSound(arg1, arg2)
		arg1:CreateSound("rbxassetid://117872201487330", 0.5, 0.5 + 0.1 * arg2, true, 10)
	end

	function arg1._Init() -- Line 29
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Feather"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Frostbite Bow = [=[local tbl = {}

function tbl.new(shar)
	local _charge_attachment = shar.Model:FindFirstChild("_bow_charge", true)
	local _charge_particles = {}
	local _visibility_delayed = nil

	local arg1 = {
	_charge_attachment = _charge_attachment, 
	_charge_particles = _charge_particles, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Dream Bow = [=[local tbl = {}

function tbl.new(shar)
	local _charge_attachment = shar.Model:FindFirstChild("_bow_charge", true)
	local _charge_particles = {}
	local _visibility_delayed = nil

	local arg1 = {
	_charge_attachment = _charge_attachment, 
	_charge_particles = _charge_particles, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Cloud"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],BaseChainsaw = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _spike_parts = {}
	local _next_toggle = 0
	local _hold_particles = {}
	local _idle_sound_hash = 0

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_spike_parts = _spike_parts, 
	_next_toggle = _next_toggle, 
	_hold_particles = _hold_particles, 
	_idle_sound_hash = _idle_sound_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.CreateHoldSounds() -- Line 29
		return {arg1:CreateSound("rbxassetid://16359327230", 0.5, 1, true)}
	end

	function arg1.PlayStartingHoldSounds() -- Line 33
	end

	function arg1.EnableParticles(, arg2) -- Line 37
		for _, v in pairs(arg1._hold_particles) do
			v.Enabled = arg2
		end
	end

	function arg1.Update(, arg2, arg3, arg4) -- Line 43
		--[[ Upvalues[1]:
			[1]: module_upvr (readonly)
		]]
		module_upvr.Update(arg1, arg2, arg3, arg4)
		if not arg4.IsActive then
		else
			if tick() < arg1._next_toggle then return end
			arg1._next_toggle = tick() + 0.03
			arg1._spike_toggle = not arg1._spike_toggle
			for i_3, v_3 in pairs(arg1._spike_parts) do
				local var18
				if v_3 == arg1._spike_toggle then
					var18 = 0
				else
					var18 = 1
				end
				arg1:_LocalTransparencyModifier(i_3, "Update", var18)
			end
		end
	end

	function arg1._PlayIdleSound(, arg2, arg3) -- Line 66
		local var23 = arg3 or 0.2
		if 0 < var23 then
			wait(var23)
			if arg2 ~= arg1._idle_sound_hash then return end
		end
		local any_CreateSound_result1_2 = arg1:CreateSound("rbxassetid://13645858587", 0.375, 1, true)
		if any_CreateSound_result1_2 then
			any_CreateSound_result1_2.Looped = true
		end
		local any_CreateSound_result1_5 = arg1:CreateSound("rbxassetid://13646484249", 0.375, 1, true)
		if any_CreateSound_result1_5 then
			any_CreateSound_result1_5.Looped = true
		end
		local any_CreateSound_result1_4 = arg1:CreateSound("rbxassetid://13646484113", 0.25, 1, true)
		if any_CreateSound_result1_4 then
			any_CreateSound_result1_4.Looped = true
		end
	end

	function arg1._RegisterSpikesPart(, arg2, arg3) -- Line 96
		arg1._spike_parts[arg2] = arg3
	end

	function arg1._RegisterBlade(, arg2) -- Line 100
		--[[ Upvalues[1]:
			[1]: ChainsawParticles_upvr (readonly)
		]]
		local SOME = ChainsawParticles_upvr:FindFirstChild(arg1.Name)
		if not SOME then
			SOME = ChainsawParticles_upvr.Default
		end
		for _, v_2 in pairs(SOME:GetChildren()) do
			local clone = v_2:Clone()
			clone.Parent = arg2
			table.insert(arg1._hold_particles, clone)
		end
	end

	function arg1._Init() -- Line 108
		arg1.Equipped:Connect(function() -- Line 109
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			local var38 = arg1
			var38._idle_sound_hash += 1
			arg1:_PlayIdleSound(arg1._idle_sound_hash)
		end)
		arg1.Unequipped:Connect(function() -- Line 114
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			local var40 = arg1
			var40._idle_sound_hash += 1
		end)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Blobsaw = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _spike_parts = {}
	local _next_toggle = 0
	local _hold_particles = {}
	local _idle_sound_hash = 0

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_spike_parts = _spike_parts, 
	_next_toggle = _next_toggle, 
	_hold_particles = _hold_particles, 
	_idle_sound_hash = _idle_sound_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterBlade(arg1.ItemModel:WaitForChild("Body"):WaitForChild("Blade"))
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("Body"):WaitForChild("Spikes1"), true)
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("Body"):WaitForChild("Spikes2"), false)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Handsaws = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _spike_parts = {}
	local _next_toggle = 0
	local _hold_particles = {}
	local _idle_sound_hash = 0

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_spike_parts = _spike_parts, 
	_next_toggle = _next_toggle, 
	_hold_particles = _hold_particles, 
	_idle_sound_hash = _idle_sound_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterBlade(arg1.ItemModel:WaitForChild("RightBlade"):WaitForChild("Blade"))
		arg1:_RegisterBlade(arg1.ItemModel:WaitForChild("LeftBlade"):WaitForChild("Blade"))
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("RightBlade"):WaitForChild("Spikes1"), true)
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("RightBlade"):WaitForChild("Spikes2"), false)
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("LeftBlade"):WaitForChild("Spikes1"), false)
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("LeftBlade"):WaitForChild("Spikes2"), true)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Chainsaw = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _spike_parts = {}
	local _next_toggle = 0
	local _hold_particles = {}
	local _idle_sound_hash = 0

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_spike_parts = _spike_parts, 
	_next_toggle = _next_toggle, 
	_hold_particles = _hold_particles, 
	_idle_sound_hash = _idle_sound_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterBlade(arg1.ItemModel:WaitForChild("Body"):WaitForChild("Blade"))
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("Body"):WaitForChild("Spikes1"), true)
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("Body"):WaitForChild("Spikes2"), false)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Buzzsaw = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _spike_parts = {}
	local _next_toggle = 0
	local _hold_particles = {}
	local _idle_sound_hash = 0

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_spike_parts = _spike_parts, 
	_next_toggle = _next_toggle, 
	_hold_particles = _hold_particles, 
	_idle_sound_hash = _idle_sound_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterBlade(arg1.ItemModel:WaitForChild("Spin"):WaitForChild("Blade"))
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("Spin"):WaitForChild("Spikes1"), true)
		arg1:_RegisterSpikesPart(arg1.ItemModel:WaitForChild("Spin"):WaitForChild("Spikes2"), false)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Festive Buzzsaw = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _spike_parts = {}
	local _next_toggle = 0
	local _hold_particles = {}
	local _idle_sound_hash = 0

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_spike_parts = _spike_parts, 
	_next_toggle = _next_toggle, 
	_hold_particles = _hold_particles, 
	_idle_sound_hash = _idle_sound_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Mega Drill = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _spike_parts = {}
	local _next_toggle = 0
	local _hold_particles = {}
	local _idle_sound_hash = 0

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_spike_parts = _spike_parts, 
	_next_toggle = _next_toggle, 
	_hold_particles = _hold_particles, 
	_idle_sound_hash = _idle_sound_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.CreateHoldSounds() -- Line 20
		local module = {}
		local any_CreateSound_result1_2 = arg1:CreateSound("rbxassetid://16359327230", 0.75, 1.25, true)
		local PitchShiftSoundEffect_2 = Instance.new("PitchShiftSoundEffect")
		PitchShiftSoundEffect_2.Octave = 0.625
		PitchShiftSoundEffect_2.Parent = any_CreateSound_result1_2
		table.insert(module, any_CreateSound_result1_2)
		local any_CreateSound_result1 = arg1:CreateSound("rbxassetid://16359327230", 0.5, 1.2, true)
		local PitchShiftSoundEffect = Instance.new("PitchShiftSoundEffect")
		PitchShiftSoundEffect.Octave = 0.5
		PitchShiftSoundEffect.Parent = any_CreateSound_result1
		table.insert(module, any_CreateSound_result1)
		return module
	end

	function arg1.PlayStartingHoldSounds() -- Line 38
		arg1:CreateSound("rbxassetid://18763594759", 0.5, 1, true, 10)
	end

	function arg1._Init() -- Line 46
		arg1:_RegisterBlade(arg1.ItemModel:WaitForChild("Drill"):WaitForChild("Blade"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],BaseRPG = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],RPG = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Head"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Neck"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pumpkin Launcher = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Nuke Launcher = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.ExplosionEffect(, arg2, arg3) -- Line 21
		--[[ Upvalues[1]:
			[1]: FunctionsController_upvr (readonly)
		]]
		FunctionsController_upvr:FireAsync(arg1:ToEnum("NukeEffect"), arg2, arg3, nil, true)
	end

	function arg1._Init() -- Line 29
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Head"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Neck"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Spaceship Launcher = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],RPKEY = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Firework Launcher = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Pencil Launcher = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Lead"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Wood"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Yellow"))
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Rocket"):WaitForChild("Neck"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Squid Launcher = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],BaseRevolver = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateAmmoVisual() -- Line 28
		local var13
		if var13 then
		else
			var13 = arg1:IsAnimationPlaying("Reload")
			if not var13 then
				var13 = arg1:IsAnimationPlaying("EmptyReload")
			end
			local any_Get_result1 = arg1.ClientItem:Get("Ammo")
			for i_3, v_2 in pairs(arg1._registered_ammo_visuals.Bullets) do
				local var18
				if not var13 then
					if i_3 <= any_Get_result1 then
						var18 = 0
					else
						var18 = 1
					end
				elseif i_3 <= arg1.ClientItem:Get("AmmoReserve") + any_Get_result1 then
					var18 = 0
				else
					var18 = 1
				end
				arg1:_LocalTransparencyModifier(v_2, "AmmoVisual", var18)
			end
			for i_4, v_3 in pairs(arg1._registered_ammo_visuals.ReloadBullets) do
				if i_4 <= any_Get_result1 then
					var18 = 0
				else
					var18 = 1
				end
				arg1:_LocalTransparencyModifier(v_3, "AmmoVisual", var18)
			end
		end
	end

	function arg1._RegisterAmmoVisual(, arg2, arg3) -- Line 47
		table.insert(arg1._registered_ammo_visuals[arg2], arg3)
	end

	function arg1._RegisterDefaultAmmoVisuals() -- Line 51
		for _, v in pairs({"ReloadBullets", "Bullets"}) do
			local SOME = arg1.ItemModel:WaitForChild(v)
			for i_2 = 1, 6 do
				arg1:_RegisterAmmoVisual(v, SOME:WaitForChild(i_2))
			end
		end
	end

	function arg1._Init() -- Line 61
		arg1.ClientItem:GetDataChangedSignal("AmmoReserve"):Connect(function() -- Line 62
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 66
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.AnimationPlayed:Connect(function(arg1_2) -- Line 70
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1_2 == "Reload" or arg1_2 == "EmptyReload" then
				arg1:_UpdateAmmoVisual()
			end
		end)
		arg1.AnimationStopped:Connect(function(arg1_3) -- Line 76
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1_3 == "Reload" or arg1_3 == "EmptyReload" then
				arg1:_UpdateAmmoVisual()
			end
		end)
		task.defer(arg1._UpdateAmmoVisual, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Sheriff = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterDefaultAmmoVisuals()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Boneclaw Revolver = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterDefaultAmmoVisuals()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Peppermint Sheriff = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Revolver = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterDefaultAmmoVisuals()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Keyvolver = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {
	local _is_empty = false
	local _keyvolver_bullets = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	_is_empty = _is_empty, 
	_keyvolver_bullets = _keyvolver_bullets, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateAmmoContext() -- Line 29
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local any_Get_result1 = arg1.ClientItem:Get("Ammo")
		local _, pairs_result2_2, pairs_result3_2 = pairs(arg1._keyvolver_bullets.Bullets)
		local var24
		for i, v in var24, pairs_result2_2, pairs_result3_2 do
			local var25
			if i <= any_Get_result1 then
				var25 = 0
			else
				var25 = 1
			end
			arg1:_LocalTransparencyModifier(v, "AmmoVisual", var25)
		end
		var24 = pairs(arg1._keyvolver_bullets.ReloadBullets)
		local pairs_result1_2, pairs_result2, pairs_result3_3 = pairs(arg1._keyvolver_bullets.ReloadBullets)
		for i_2, v_2 in pairs_result1_2, pairs_result2, pairs_result3_3 do
			if any_Get_result1 < i_2 and i_2 <= any_Get_result1 + arg1.ClientItem:Get("AmmoReserve") then
				var25 = 0
			else
				var25 = 1
			end
			arg1:_LocalTransparencyModifier(v_2, "AmmoVisual", var25)
		end
		if any_Get_result1 > 0 then
			pairs_result1_2 = false
		else
			pairs_result1_2 = true
		end
		if pairs_result1_2 == arg1._is_empty then
		else
			arg1._is_empty = pairs_result1_2
			if arg1._is_empty then
				local _ = "Empty"
			else
			end
			arg1:ChangeEquipAnimation("Equip".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeIdleAnimation("Idle".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeSprintAnimation("Sprint".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeInspectAnimation("Inspect".."")
		end
	end

	function arg1._Setup() -- Line 56
		for _, v_3 in pairs({"Bullets", "ReloadBullets"}) do
			arg1._keyvolver_bullets[v_3] = {}
			for i_4 = 1, 6 do
				arg1._keyvolver_bullets[v_3][i_4] = arg1.ItemModel:WaitForChild(v_3..i_4):WaitForChild("Bullet")
			end
		end
	end

	function arg1._Init() -- Line 66
		arg1.ClientItem:GetDataChangedSignal("AmmoReserve"):Connect(function() -- Line 67
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoContext()
		end)
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 71
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoContext()
		end)
		arg1:_Setup()
		arg1:_UpdateAmmoContext()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Peppergun = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {
	local _is_empty = false

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	_is_empty = _is_empty, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateDefaultAnimationsFromAmmo() -- Line 28
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var4
		if arg1.ClientItem:Get("Ammo") > 0 then
			var4 = false
		else
			var4 = true
		end
		if var4 == arg1._is_empty then
		else
			arg1._is_empty = var4
			if arg1._is_empty then
				local const_string = "Empty"
			else
			end
			arg1:ChangeEquipAnimation("Equip".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeIdleAnimation("Idle".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeSprintAnimation("Sprint".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeInspectAnimation("Inspect".."")
		end
	end

	function arg1._Init() -- Line 46
		arg1.ClientItem:GetDataChangedSignal("AmmoReserve"):Connect(function() -- Line 47
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateDefaultAnimationsFromAmmo()
		end)
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 51
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateDefaultAnimationsFromAmmo()
		end)
		arg1:_RegisterDefaultAmmoVisuals()
		arg1:_UpdateDefaultAnimationsFromAmmo()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Slingshot = [=[local tbl = {}

function tbl.new(shar)
	local Sphere = shar.ItemModel:WaitForChild("Ball"):WaitForChild("Sphere")
	local _visibility_delayed = nil

	local arg1 = {
	Sphere = Sphere, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateBall() -- Line 30
		local var4
		if var4 then
		else
			var4 = true
			if 0 >= arg1.ClientItem:Get("Ammo") then
				var4 = arg1:IsAnimationPlaying("Reload")
				local var5
			end
			if var4 and not arg1._visibility_delayed then
				arg1._visibility_delayed = true
				wait(0.1)
				arg1:_UpdateBall()
				return
			end
			if var4 then
				var5 = 0
			else
				var5 = 1
			end
			arg1:_LocalTransparencyModifier(arg1.Sphere, "AmmoVisual", var5)
			arg1._visibility_delayed = nil
		end
	end

	function arg1._Init() -- Line 51
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 52
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateBall()
		end)
		arg1.AnimationPlayed:Connect(function(arg1_2) -- Line 56
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1_2 == "Reload" then
				arg1:_UpdateBall()
			end
		end)
		arg1.AnimationStopped:Connect(function(arg1_3) -- Line 62
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1_3 == "Reload" then
				arg1:_UpdateBall()
			end
		end)
		task.spawn(arg1._UpdateBall, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Goalpost = [=[local tbl = {}

function tbl.new(shar)
	local Sphere = shar.ItemModel:WaitForChild("Ball"):WaitForChild("Sphere")
	local _visibility_delayed = nil

	local arg1 = {
	Sphere = Sphere, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Stick = [=[local tbl = {}

function tbl.new(shar)
	local Sphere = shar.ItemModel:WaitForChild("Ball"):WaitForChild("Sphere")
	local _visibility_delayed = nil

	local arg1 = {
	Sphere = Sphere, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Boneshot = [=[local tbl = {}

function tbl.new(shar)
	local Sphere = shar.ItemModel:WaitForChild("Ball"):WaitForChild("Sphere")
	local _visibility_delayed = nil

	local arg1 = {
	Sphere = Sphere, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Reindeer Slingshot = [=[local tbl = {}

function tbl.new(shar)
	local Sphere = shar.ItemModel:WaitForChild("Ball"):WaitForChild("Sphere")
	local _visibility_delayed = nil

	local arg1 = {
	Sphere = Sphere, 
	_visibility_delayed = _visibility_delayed, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Fists = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Fists of Hurt = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayHitmarkerSound(, arg2, arg3) -- Line 20
		--[[ Upvalues[1]:
			[1]: Fists_upvr (readonly)
		]]
		if arg2 then
			Fists_upvr.PlayHitmarkerSound(arg1, arg2, arg3)
		else
			arg1:_CreateHitmarkerSound("rbxassetid://88497957004619", 1.5 / arg3, 0.75 + 0.25 * math.random(), script, true, 1)
		end
	end

	function arg1._Init() -- Line 32
	end

	arg1._Init()
	return arg1
end

return tbl]=],Brass Knuckles = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pumpkin Claws = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Festive Fists = [=[local tbl = {}

function tbl.new(shar)
	local _festive_lights_circuits = {}

	local arg1 = {
	_festive_lights_circuits = _festive_lights_circuits, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.Update(, arg2, arg3, arg4) -- Line 23
		--[[ Upvalues[1]:
			[1]: Fists_upvr (readonly)
		]]
		Fists_upvr.Update(arg1, arg2, arg3, arg4)
		if not arg4.IsActive then
		else
			for _, v_2 in pairs(arg1._festive_lights_circuits) do
				v_2:Update(arg2)
			end
		end
	end

	function arg1.Destroy() -- Line 35
		--[[ Upvalues[1]:
			[1]: Fists_upvr (readonly)
		]]
		for _, v in pairs(arg1._festive_lights_circuits) do
			v:Destroy()
		end
		Fists_upvr.Destroy(arg1)
	end

	function arg1._Setup() -- Line 47
		--[[ Upvalues[1]:
			[1]: FestiveLightsCircuit_upvr (readonly)
		]]
		for i_2 in pairs(arg1._arm_submodels) do
			table.insert(arg1._festive_lights_circuits, FestiveLightsCircuit_upvr.new(0.5, i_2:WaitForChild("Light1"), i_2:WaitForChild("Light2"), i_2:WaitForChild("Light3")))
		end
	end

	function arg1._Init() -- Line 53
		arg1:_Setup()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Boxing Gloves = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayHitmarkerSound(, arg2, arg3) -- Line 20
		--[[ Upvalues[1]:
			[1]: Fists_upvr (readonly)
		]]
		if arg2 then
			Fists_upvr.PlayHitmarkerSound(arg1, arg2, arg3)
		else
			arg1:_CreateHitmarkerSound("rbxassetid://17650289572", 1.5 / arg3, 1.25 + 0.25 * math.random(), script, true, 1)
		end
	end

	function arg1._Init() -- Line 32
	end

	arg1._Init()
	return arg1
end

return tbl]=],Flamethrower = [=[local tbl = {}

function tbl.new(shar)
	local _flame_particles = {}
	local _flame_particles_hash = 0
	local _flame_sounds = nil

	local arg1 = {
	_flame_particles = _flame_particles, 
	_flame_particles_hash = _flame_particles_hash, 
	_flame_sounds = _flame_sounds, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.SetFlameParticlesEnabled(, arg2) -- Line 30
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		arg1._flame_particles_hash += 1
		for _, v_upvr in pairs(arg1._flame_particles) do
			if v_upvr:IsA("ParticleEmitter") then
				v_upvr.Enabled = arg2
			elseif v_upvr:IsA("Light") then
				if arg2 then
					v_upvr.Brightness = 10
				else
					local _flame_particles_hash_upvr = arg1._flame_particles_hash
					task.spawn(_G.utility.RenderstepForLoop, _G.utility, 0, 100, 10, function(arg1_2) -- Line 41
						--[[ Upvalues[3]:
							[1]: _flame_particles_hash_upvr (readonly)
							[2]: arg1 (readonly)
							[3]: v_upvr (readonly)
						]]
						if _flame_particles_hash_upvr ~= arg1._flame_particles_hash then
							return true
						end
						v_upvr.Brightness = 20 * (1 - arg1_2 / 100)
					end)
				end
			end
		end
		if arg2 then
			arg1:PlayFlameSoundEffect()
		else
			arg1:StopFlameSoundEffect()
		end
	end

	function arg1.PlayFlameSoundEffect(, arg2) -- Line 59
		arg1:StopFlameSoundEffect(false)
		local _flame_sounds = arg1._flame_sounds
		if not _flame_sounds then
			_flame_sounds = arg1:_CreateFlameSoundEffects()
		end
		arg1._flame_sounds = _flame_sounds
		for _, v_2 in pairs(arg1._flame_sounds) do
			v_2.Looped = true
		end
	end

	function arg1.StopFlameSoundEffect(, arg2) -- Line 69
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		local _flame_sounds_upvr = arg1._flame_sounds
		if _flame_sounds_upvr then
			_flame_sounds_upvr = _G.utility:CloneTable(arg1._flame_sounds)
		end
		arg1._flame_sounds = nil
		if not _flame_sounds_upvr or #_flame_sounds_upvr == 0 then
		else
			for _, v_4 in pairs(_flame_sounds_upvr) do
				({})[v_4] = v_4.Volume
				local var31_upvr
			end
			task.spawn(_G.utility.RenderstepForLoop, _G.utility, 0, 100, 4, function(arg1_3) -- Line 84
				--[[ Upvalues[2]:
					[1]: _flame_sounds_upvr (readonly)
					[2]: var31_upvr (readonly)
				]]
				for _, v_5 in pairs(_flame_sounds_upvr) do
					v_5.Volume = var31_upvr[v_5] * (1 - arg1_3 / 100)
				end
			end)
		end
	end

	function arg1.PlayAirblastSoundEffect() -- Line 91
		arg1:CreateSound("rbxassetid://17209245422", 1, 1, true, 5)
	end

	function arg1.AirblastEffect() -- Line 95
		--[[ Upvalues[3]:
			[1]: FlamethrowerAirblasts_upvr (readonly)
			[2]: BetterDebris_upvr (readonly)
			[3]: _G.utility (readonly)
		]]
		local SOME = FlamethrowerAirblasts_upvr:FindFirstChild(arg1.Name)
		if not SOME then
			SOME = FlamethrowerAirblasts_upvr.Default
		end
		local clone_2 = SOME.Attachment:Clone()
		clone_2.CFrame = arg1._muzzle_attachments[1].CFrame
		clone_2.Parent = arg1._muzzle_attachments[1].Parent
		BetterDebris_upvr:AddItem(clone_2, 5)
		_G.utility:PlayParticles(clone_2)
		arg1:PlayAirblastSoundEffect()
	end

	function arg1._CreateFlameSoundEffects() -- Line 108
		return {arg1:CreateSound("rbxassetid://17209245734", 1.5, 1, true)}
	end

	function arg1._Setup() -- Line 112
		--[[ Upvalues[1]:
			[1]: FlamethrowerFlames_upvr (readonly)
		]]
		local SOME_2 = FlamethrowerFlames_upvr:FindFirstChild(arg1.Name)
		if not SOME_2 then
			SOME_2 = FlamethrowerFlames_upvr.Default
		end
		for _, v_3 in pairs(SOME_2.Attachment:GetChildren()) do
			local clone = v_3:Clone()
			clone.Parent = arg1._muzzle_attachments[1]
			table.insert(arg1._flame_particles, clone)
		end
	end

	function arg1._Init() -- Line 120
		arg1:_Setup()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pixel Flamethrower = [=[local tbl = {}

function tbl.new(shar)
	local _flame_particles = {}
	local _flame_particles_hash = 0
	local _flame_sounds = nil

	local arg1 = {
	_flame_particles = _flame_particles, 
	_flame_particles_hash = _flame_particles_hash, 
	_flame_sounds = _flame_sounds, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayAirblastSoundEffect() -- Line 20
		arg1:CreateSound("rbxassetid://17772394926", 1, 1, true)
	end

	function arg1._CreateFlameSoundEffects() -- Line 28
		return {arg1:CreateSound("rbxassetid://17772394725", 2, 1.25, true)}
	end

	function arg1._Init() -- Line 32
	end

	arg1._Init()
	return arg1
end

return tbl]=],Jack O'Thrower = [=[local tbl = {}

function tbl.new(shar)
	local _flame_particles = {}
	local _flame_particles_hash = 0
	local _flame_sounds = nil

	local arg1 = {
	_flame_particles = _flame_particles, 
	_flame_particles_hash = _flame_particles_hash, 
	_flame_sounds = _flame_sounds, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Lamethrower = [=[local tbl = {}

function tbl.new(shar)
	local _flame_particles = {}
	local _flame_particles_hash = 0
	local _flame_sounds = nil

	local arg1 = {
	_flame_particles = _flame_particles, 
	_flame_particles_hash = _flame_particles_hash, 
	_flame_sounds = _flame_sounds, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Snowblower = [=[local tbl = {}

function tbl.new(shar)
	local _flame_particles = {}
	local _flame_particles_hash = 0
	local _flame_sounds = nil

	local arg1 = {
	_flame_particles = _flame_particles, 
	_flame_particles_hash = _flame_particles_hash, 
	_flame_sounds = _flame_sounds, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._CreateFlameSoundEffects() -- Line 26
		return {arg1:CreateSound("rbxassetid://89834210702442", 0.75, 1, true), arg1:CreateSound("rbxassetid://115412300262585", 1, 1, true)}
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Glitterthrower = [=[local tbl = {}

function tbl.new(shar)
	local _flame_particles = {}
	local _flame_particles_hash = 0
	local _flame_sounds = nil

	local arg1 = {
	_flame_particles = _flame_particles, 
	_flame_particles_hash = _flame_particles_hash, 
	_flame_sounds = _flame_sounds, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._CreateFlameSoundEffects() -- Line 26
		return {arg1:CreateSound("rbxassetid://17209245734", 1.25, 1, true), arg1:CreateSound("rbxassetid://129124742663895", 2, 1.25, true)}
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Minigun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Pumpkin Minigun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pixel Minigun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._CreateMinigunShootingSounds() -- Line 26
		local any_CreateSound_result1 = arg1:CreateSound("rbxassetid://112116120783481", 8.75, 1, true)
		any_CreateSound_result1.TimePosition = 0.25 + 0.25 * math.random()
		any_CreateSound_result1.Looped = true
		return {any_CreateSound_result1}
	end

	function arg1._CreateMinigunWindingSounds() -- Line 34
		local any_CreateSound_result1_2 = arg1:CreateSound("rbxassetid://111731354794881", 0.5, 1, true)
		any_CreateSound_result1_2.TimePosition = 2
		any_CreateSound_result1_2.Looped = true
		return {any_CreateSound_result1_2}
	end

	function arg1._Init() -- Line 42
	end

	arg1._Init()
	return arg1
end

return tbl]=],Lasergun 3000 = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._CreateMinigunShootingSounds() -- Line 30
		local any_CreateSound_result1_4 = arg1:CreateSound("rbxassetid://17722581026", 0.75, 1, true)
		any_CreateSound_result1_4.TimePosition = 0.5 * math.random()
		any_CreateSound_result1_4.Looped = true
		local any_CreateSound_result1 = arg1:CreateSound("rbxassetid://17722580791", 0.75, 1, true)
		any_CreateSound_result1.TimePosition = 0.5 * math.random()
		any_CreateSound_result1.Looped = true
		local any_CreateSound_result1_2 = arg1:CreateSound("rbxassetid://17722580585", 0.75, 1, true)
		any_CreateSound_result1_2.TimePosition = 0.5 * math.random()
		any_CreateSound_result1_2.Looped = true
		return {any_CreateSound_result1_4, any_CreateSound_result1, any_CreateSound_result1_2}
	end

	function arg1._CreateMinigunWindingSounds() -- Line 50
		local any_CreateSound_result1_3 = arg1:CreateSound("rbxassetid://17722633119", 0.25, 1, true)
		any_CreateSound_result1_3.Looped = true
		return {any_CreateSound_result1_3}
	end

	function arg1._Init() -- Line 57
	end

	arg1._Init()
	return arg1
end

return tbl]=],Wrapped Minigun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Fighter Jet = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 42
	end

	arg1._Init()
	return arg1
end

return tbl]=],Grenade Launcher = [=[local tbl = {}

function tbl.new(shar)
	local ReloadBulletsModel = shar.ItemModel:WaitForChild("ReloadBullets")
	local BulletsModel = shar.ItemModel:WaitForChild("Bullets")
	local _bullet_parts = {}

	local arg1 = {
	ReloadBulletsModel = ReloadBulletsModel, 
	BulletsModel = BulletsModel, 
	_bullet_parts = _bullet_parts, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateAmmoVisual() -- Line 31
		if arg1._destroyed then
		else
			for i_3, v_2 in pairs(arg1._bullet_parts.BulletsModel) do
				for _, v_3 in pairs(v_2:GetChildren()) do
					local var26
					if i_3 <= arg1.ClientItem:Get("Ammo") then
						var26 = 0
					else
						var26 = 1
					end
					arg1:_LocalTransparencyModifier(v_3, "AmmoVisual", var26)
				end
			end
			for i_5, v_4 in pairs(arg1._bullet_parts.ReloadBulletsModel) do
				for _, v_5 in pairs(v_4:GetChildren()) do
					if i_5 <= arg1.ClientItem:Get("AmmoReserve") then
						var26 = 0
					else
						var26 = 1
					end
					arg1:_LocalTransparencyModifier(v_5, "AmmoVisual", var26)
				end
			end
		end
	end

	function arg1._Setup() -- Line 52
		for _, v in pairs({"ReloadBulletsModel", "BulletsModel"}) do
			arg1._bullet_parts[v] = {}
			for i_2 = 1, 6 do
				arg1._bullet_parts[v][i_2] = arg1[v]:WaitForChild(i_2)
			end
		end
	end

	function arg1._Init() -- Line 62
		arg1.ClientItem:GetDataChangedSignal("AmmoReserve"):Connect(function() -- Line 63
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 67
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1:_Setup()
		task.spawn(arg1._UpdateAmmoVisual, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Skull Launcher = [=[local tbl = {}

function tbl.new(shar)
	local ReloadBulletsModel = shar.ItemModel:WaitForChild("ReloadBullets")
	local BulletsModel = shar.ItemModel:WaitForChild("Bullets")
	local _bullet_parts = {}

	local arg1 = {
	ReloadBulletsModel = ReloadBulletsModel, 
	BulletsModel = BulletsModel, 
	_bullet_parts = _bullet_parts, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Uranium Launcher = [=[local tbl = {}

function tbl.new(shar)
	local ReloadBulletsModel = shar.ItemModel:WaitForChild("ReloadBullets")
	local BulletsModel = shar.ItemModel:WaitForChild("Bullets")
	local _bullet_parts = {}

	local arg1 = {
	ReloadBulletsModel = ReloadBulletsModel, 
	BulletsModel = BulletsModel, 
	_bullet_parts = _bullet_parts, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Swashbuckler = [=[local tbl = {}

function tbl.new(shar)
	local ReloadBulletsModel = shar.ItemModel:WaitForChild("ReloadBullets")
	local BulletsModel = shar.ItemModel:WaitForChild("Bullets")
	local _bullet_parts = {}

	local arg1 = {
	ReloadBulletsModel = ReloadBulletsModel, 
	BulletsModel = BulletsModel, 
	_bullet_parts = _bullet_parts, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Snowball Launcher = [=[local tbl = {}

function tbl.new(shar)
	local ReloadBulletsModel = shar.ItemModel:WaitForChild("ReloadBullets")
	local BulletsModel = shar.ItemModel:WaitForChild("Bullets")
	local _bullet_parts = {}

	local arg1 = {
	ReloadBulletsModel = ReloadBulletsModel, 
	BulletsModel = BulletsModel, 
	_bullet_parts = _bullet_parts, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Gearnade Launcher = [=[local tbl = {}

function tbl.new(shar)
	local ReloadBulletsModel = shar.ItemModel:WaitForChild("ReloadBullets")
	local BulletsModel = shar.ItemModel:WaitForChild("Bullets")
	local _bullet_parts = {}

	local arg1 = {
	ReloadBulletsModel = ReloadBulletsModel, 
	BulletsModel = BulletsModel, 
	_bullet_parts = _bullet_parts, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Katana = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Saber = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayDeflectHitSounds() -- Line 20
		arg1:CreateSound("rbxassetid://17640978084", 1.75, 0.9 + 0.2 * math.random(), true, 5)
	end

	function arg1._Init() -- Line 28
	end

	arg1._Init()
	return arg1
end

return tbl]=],Lightning Bolt = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayDeflectHitSounds() -- Line 20
		arg1:CreateSound("rbxassetid://18763556154", 1.25, 1 + 0.25 * math.random(), true, 5)
		arg1:CreateSound("rbxassetid://14776437962", 1, 0.9 + 0.2 * math.random(), true, 5)
	end

	function arg1._Init() -- Line 29
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pixel Katana = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayDeflectHitSounds() -- Line 20
		arg1:CreateSound("rbxassetid://103220108305486", 1.25, 1 + 0.25 * math.random(), true, 5)
		arg1:CreateSound("rbxassetid://127511989334071", 1, 0.9 + 0.2 * math.random(), true, 5)
	end

	function arg1._Init() -- Line 29
	end

	arg1._Init()
	return arg1
end

return tbl]=],Devil's Trident = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],2025 Katana = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayDeflectHitSounds() -- Line 20
		arg1:CreateSound("rbxassetid://14776414133", 0.75, 1.5 + 0.5 * math.random(), true, 5)
		arg1:CreateSound("rbxassetid://14776437962", 0.75, 0.9 + 0.2 * math.random(), true, 5)
		arg1:CreateSound("rbxassetid://76137984414279", 1.25, 0.9 + 0.2 * math.random(), true, 5)
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Keytana = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayDeflectHitSounds() -- Line 20
		arg1:CreateSound("rbxassetid://14776414133", 1.25, 1.5 + 0.5 * math.random(), true, 5)
		arg1:CreateSound("rbxassetid://14776437962", 1, 0.9 + 0.2 * math.random(), true, 5)
		arg1:CreateSound("rbxassetid://110122962237431", 1.5, 1.25 + 0.25 * math.random(), true, 5)
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Stellar Katana = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Paintball Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetPaintballColor() -- Line 23
		return Color3.fromHSV(tick() * 2 % 1, 0.75, 1)
	end

	function arg1.PlaySplatSound(, arg2) -- Line 27
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		_G.utility:CreateSound("rbxassetid://16835701807", 0.5, 1 + 0.4 * math.random(), arg2, true, 1)
	end

	function arg1._Init() -- Line 35
	end

	arg1._Init()
	return arg1
end

return tbl]=],Slime Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetPaintballColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: Color3_fromRGB_result1_upvr (readonly)
		]]
		return Color3_fromRGB_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Boba Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetPaintballColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: Color3_fromRGB_result1_upvr (readonly)
		]]
		return Color3_fromRGB_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Brain Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetPaintballColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: Color3_fromRGB_result1_upvr (readonly)
		]]
		return Color3_fromRGB_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Snowball Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Ketchup Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetPaintballColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: Color3_fromRGB_result1_upvr (readonly)
		]]
		return Color3_fromRGB_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Flashbang = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayFlashSound(, arg2) -- Line 22
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		_G.utility:CreateSound("rbxassetid://14778230670", 1, 1, arg2, true, 10)
	end

	function arg1.PlayRingingSound() -- Line 26
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		return _G.utility:CreateSound("rbxassetid://14778230632", 1, 1, script, true, 10)
	end

	function arg1._Init() -- Line 34
	end

	arg1._Init()
	return arg1
end

return tbl]=],Disco Ball = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayFlashSound(, arg2) -- Line 22
		--[[ Upvalues[2]:
			[1]: Flashbang_upvr (readonly)
			[2]: _G.utility (readonly)
		]]
		Flashbang_upvr.PlayFlashSound(arg1, arg2)
		_G.utility:CreateSound("rbxassetid://17643323391", 1, 1, arg2, true, 10)
	end

	function arg1.PlayRingingSound() -- Line 27
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		return _G.utility:CreateSound("rbxassetid://17643323267", 1, 0.85, script, true, 10)
	end

	function arg1._Init() -- Line 35
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pixel Flashbang = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayFlashSound(, arg2) -- Line 22
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		_G.utility:CreateSound("rbxassetid://94088948330527", 1, 1, arg2, true, 10)
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Camera = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayFlashSound(, arg2) -- Line 22
		--[[ Upvalues[2]:
			[1]: Flashbang_upvr (readonly)
			[2]: _G.utility (readonly)
		]]
		Flashbang_upvr.PlayFlashSound(arg1, arg2)
		_G.utility:CreateSound("rbxassetid://18763877246", 1.25, 1, arg2, true, 10)
	end

	function arg1._Init() -- Line 31
	end

	arg1._Init()
	return arg1
end

return tbl]=],Skullbang = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Shining Star = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Lightbulb = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayFlashSound(, arg2) -- Line 23
		--[[ Upvalues[2]:
			[1]: Flashbang_upvr (readonly)
			[2]: _G.utility (readonly)
		]]
		Flashbang_upvr.PlayFlashSound(arg1, arg2)
		_G.utility:CreateSound("rbxassetid://137109782386847", 2, 1, arg2, true, 10)
	end

	function arg1._Init() -- Line 32
		--[[ Upvalues[1]:
			[1]: _G.r (readonly)
		]]
		task.defer(function() -- Line 33
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: _G.r (copied, readonly)
			]]
			table.insert(arg1._connections, arg1.ClientItem.ProjectileThrown:Connect(function(arg1_2, arg2) -- Line 34
				--[[ Upvalues[2]:
					[1]: arg1 (copied, readonly)
					[2]: _G.r (copied, readonly)
				]]
				while arg1_2:IsDescendantOf(workspace) do
					arg2.Neon.Transparency = 1 - math.min(1, (tick() - tick()) / arg1.ClientItem.Info.DetonateDelay) ^ 4
					_G.r.RenderStepped:Wait()
				end
			end))
		end)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Exogun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Wondergun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 23
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1.ExplosionEffect(, arg2, arg3) -- Line 27
		--[[ Upvalues[2]:
			[1]: Exogun_upvr (readonly)
			[2]: WondergunExplosionParticles_upvr (readonly)
		]]
		Exogun_upvr.ExplosionEffect(arg1, arg2, arg3, WondergunExplosionParticles_upvr)
	end

	function arg1._Init() -- Line 35
	end

	arg1._Init()
	return arg1
end

return tbl]=],Singularity = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 23
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1.ExplosionEffect(, arg2, arg3) -- Line 27
		--[[ Upvalues[2]:
			[1]: Exogun_upvr (readonly)
			[2]: SingularityExplosionParticles_upvr (readonly)
		]]
		Exogun_upvr.ExplosionEffect(arg1, arg2, arg3, SingularityExplosionParticles_upvr)
	end

	function arg1._Init() -- Line 35
	end

	arg1._Init()
	return arg1
end

return tbl]=],Ray Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 23
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1.ExplosionEffect(, arg2, arg3) -- Line 27
		--[[ Upvalues[2]:
			[1]: Exogun_upvr (readonly)
			[2]: RayGunExplosionParticles_upvr (readonly)
		]]
		Exogun_upvr.ExplosionEffect(arg1, arg2, arg3, RayGunExplosionParticles_upvr)
	end

	function arg1._Init() -- Line 35
	end

	arg1._Init()
	return arg1
end

return tbl]=],Exogourd = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 23
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1.ExplosionEffect(, arg2, arg3) -- Line 27
		--[[ Upvalues[2]:
			[1]: Exogun_upvr (readonly)
			[2]: ExogourdExplosionParticles_upvr (readonly)
		]]
		Exogun_upvr.ExplosionEffect(arg1, arg2, arg3, ExogourdExplosionParticles_upvr)
	end

	function arg1._Init() -- Line 35
	end

	arg1._Init()
	return arg1
end

return tbl]=],Midnight Festive Exogun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Repulsor = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Grenade = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Whoopee Cushion = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Water Balloon = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Soul Grenade = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Dynamite = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Jingle Grenade = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Subspace Tripmine = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Don't Press = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayHideMineSound(, arg2) -- Line 23
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		_G.utility:CreateSound("rbxassetid://17675605394", 1, 1.25, arg2.Hitbox, true, 5)
	end

	function arg1.ExplosionEffect(, arg2) -- Line 27
		--[[ Upvalues[1]:
			[1]: FunctionsController_upvr (readonly)
		]]
		FunctionsController_upvr:FireAsync(arg1:ToEnum("NukeEffect"), arg2, arg1.ClientItem.Info.ExplosionRadius * 3, 0.25)
	end

	function arg1._Init() -- Line 35
	end

	arg1._Init()
	return arg1
end

return tbl]=],Spring = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Trick or Treat = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.ExplosionEffect(, arg2) -- Line 23
		--[[ Upvalues[1]:
			[1]: FunctionsController_upvr (readonly)
		]]
		for i = 1, 3 do
			FunctionsController_upvr:FireAsync(arg1:ToEnum("ExplosionEffect"), arg2 + Vector3.new(10 * (math.random() - 0.5), i ^ 2, 10 * (math.random() - 0.5)), arg1.ClientItem.Info.ExplosionRadius * (1 + 1 * math.random()), 1 + 0.25 * (i - 1))
			wait(0.1)
		end
	end

	function arg1._Init() -- Line 38
	end

	arg1._Init()
	return arg1
end

return tbl]=],Dev-in-the-Box = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],DIY Tripmine = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Flare Gun = [=[local tbl = {}

function tbl.new(shar)
	local ShellSubModel = shar.ItemModel:WaitForChild("Shell")

	local arg1 = {
	ShellSubModel = ShellSubModel, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateAmmoVisual() -- Line 33
		local var11
		if 0 < arg1.ClientItem:Get("Ammo") then
			var11 = 0
		else
			var11 = 1
		end
		for _, v in pairs(arg1.ShellSubModel:GetChildren()) do
			if v:IsA("BasePart") then
				arg1:_LocalTransparencyModifier(v, "AmmoVisual", var11)
			end
		end
	end

	function arg1._Init() -- Line 43
		--[[ Upvalues[2]:
			[1]: Players_upvr (readonly)
			[2]: _G.utility (readonly)
		]]
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 44
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		task.defer(function() -- Line 48
			--[[ Upvalues[3]:
				[1]: arg1 (readonly)
				[2]: Players_upvr (copied, readonly)
				[3]: _G.utility (copied, readonly)
			]]
			arg1.ClientItem.ProjectileShot:Connect(function(arg1_2, arg2, arg3) -- Line 49
				--[[ Upvalues[3]:
					[1]: arg1 (copied, readonly)
					[2]: Players_upvr (copied, readonly)
					[3]: _G.utility (copied, readonly)
				]]
				-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
				local TeamID = arg1.ClientItem.ClientFighter.Player:GetAttribute("TeamID")
				local var42 = not arg1.ClientItem.ClientFighter.IsLocalPlayer
				if var42 then
					var42 = not TeamID
					if not var42 then
						if TeamID == Players_upvr.LocalPlayer:GetAttribute("TeamID") then
							var42 = false
						else
							var42 = true
						end
					end
				end
				if not var42 or not Color3.fromRGB(255, 0, 0) then
					local Color3_fromRGB_result1 = Color3.fromRGB(47, 255, 0)
				end
				local any_ToHSV_result1_2, any_ToHSV_result2, any_ToHSV_result3_2 = Color3_fromRGB_result1:ToHSV()
				for _, v_2 in pairs(arg3:GetDescendants()) do
					local var50
					if not var50 then
						local function INLINED_3() -- Internal function, doesn't exist in bytecode
							var50 = Color3_fromRGB_result1
							return var50
						end
						if not v_2:GetAttribute("IsDangerParticle") or not INLINED_3() then
							var50 = Color3.fromHSV(any_ToHSV_result1_2, any_ToHSV_result2 * 0.875, any_ToHSV_result3_2)
						end
						if v_2:IsA("ParticleEmitter") or v_2:IsA("Trail") then
							v_2.Color = ColorSequence.new(var50)
						elseif v_2:IsA("Light") then
							v_2.Color = var50
						end
					end
				end
				_G.utility:CreateSound("rbxassetid://17331783148", 1.25, 1, arg3.Primary, true).Looped = true
			end)
		end)
		arg1:_UpdateAmmoVisual()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Firework Gun = [=[local tbl = {}

function tbl.new(shar)
	local ShellSubModel = shar.ItemModel:WaitForChild("Shell")

	local arg1 = {
	ShellSubModel = ShellSubModel, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 29
		--[[ Upvalues[2]:
			[1]: _G.utility (readonly)
			[2]: _G.r (readonly)
		]]
		task.defer(function() -- Line 30
			--[[ Upvalues[3]:
				[1]: arg1 (readonly)
				[2]: _G.utility (copied, readonly)
				[3]: _G.r (copied, readonly)
			]]
			arg1.ClientItem.ProjectileShot:Connect(function(arg1_2, arg2, arg3) -- Line 31
				--[[ Upvalues[3]:
					[1]: _G.utility (copied, readonly)
					[2]: arg1 (copied, readonly)
					[3]: _G.r (copied, readonly)
				]]
				local Primary = arg3.Primary
				_G.utility:CreateSound("rbxassetid://17684836623", 1.25, 1, Primary, true, 5)
				while not arg1._destroyed and arg3:IsDescendantOf(workspace) and not (tick() < tick() + 0.5 or 0 > arg1_2.Velocity.Y) do
					_G.r.RenderStepped:Wait()
				end
				_G.utility:PlayParticles(arg3.Primary.explode)
				_G.utility:CreateSound("rbxassetid://17684836889", 1.25, 1, Primary, true, 5)
			end)
		end)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Dynamite Gun = [=[local tbl = {}

function tbl.new(shar)
	local ShellSubModel = shar.ItemModel:WaitForChild("Shell")

	local arg1 = {
	ShellSubModel = ShellSubModel, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Vexed Flare Gun = [=[local tbl = {}

function tbl.new(shar)
	local ShellSubModel = shar.ItemModel:WaitForChild("Shell")

	local arg1 = {
	ShellSubModel = ShellSubModel, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Wrapped Flare Gun = [=[local tbl = {}

function tbl.new(shar)
	local ShellSubModel = shar.ItemModel:WaitForChild("Shell")

	local arg1 = {
	ShellSubModel = ShellSubModel, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Banana Flare = [=[local tbl = {}

function tbl.new(shar)
	local ShellSubModel = shar.ItemModel:WaitForChild("Shell")

	local arg1 = {
	ShellSubModel = ShellSubModel, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateViewModelAnimations() -- Line 26
		local var4
		if 0 < arg1.ClientItem:Get("Ammo") then
			var4 = "RareInspect"
		else
			var4 = "nil"
		end
		arg1.Animator:ChangeRareInspectAnimation(var4)
	end

	function arg1._Init() -- Line 30
		table.insert(arg1._connections, arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 31
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateViewModelAnimations()
		end))
		task.defer(arg1._UpdateViewModelAnimations, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Uzi = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Water Uzi = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Electro Uzi = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Demon Uzi = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pine Uzi = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Money Gun = [=[local tbl = {}

function tbl.new(shar)
	local _body_money = shar.ItemModel:WaitForChild("Body"):WaitForChild("Money")
	local _body_money_decal1 = shar._body_money:WaitForChild("Decal1")
	local _body_money_decal2 = shar._body_money:WaitForChild("Decal2")
	local _magazine_money = shar.ItemModel:WaitForChild("Magazine"):WaitForChild("Money")
	local _magazine_money_decal1 = shar._magazine_money:WaitForChild("Decal1")
	local _magazine_money_decal2 = shar._magazine_money:WaitForChild("Decal2")

	local arg1 = {
	_body_money = _body_money, 
	_body_money_decal1 = _body_money_decal1, 
	_body_money_decal2 = _body_money_decal2, 
	_magazine_money = _magazine_money, 
	_magazine_money_decal1 = _magazine_money_decal1, 
	_magazine_money_decal2 = _magazine_money_decal2, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 29
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._UpdateAmmoVisual() -- Line 37
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var5
		if arg1._destroyed then
		else
			local any_Get_result1 = arg1.ClientItem:Get("Ammo")
			if 0 < any_Get_result1 then
				var5 = 0
			else
				var5 = 1
			end
			if 1 < any_Get_result1 or arg1:IsAnimationPlaying("Reload") then
				local const_number = 0
			else
			end
			arg1:_LocalTransparencyModifier(arg1._body_money, "AmmoVisual", var5)
			arg1:_LocalTransparencyModifier(arg1._body_money_decal1, "AmmoVisual", var5)
			arg1:_LocalTransparencyModifier(arg1._body_money_decal2, "AmmoVisual", var5)
			arg1:_LocalTransparencyModifier(arg1._magazine_money, "AmmoVisual", 1)
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:_LocalTransparencyModifier(arg1._magazine_money_decal1, "AmmoVisual", 1)
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:_LocalTransparencyModifier(arg1._magazine_money_decal2, "AmmoVisual", 1)
		end
	end

	function arg1._Init() -- Line 55
		arg1.ClientItem:GetDataChangedSignal("AmmoReserve"):Connect(function() -- Line 56
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 60
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.AnimationPlayed:Connect(function() -- Line 64
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.AnimationStopped:Connect(function() -- Line 68
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		task.defer(arg1._UpdateAmmoVisual, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Handgun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Blaster = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Hand Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Gumball Handgun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Burst Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Electro Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Spectral Burst = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Aqua Burst = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pine Burst = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],FAMAS = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Freeze Ray = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Temporal Ray = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Gum Ray = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Spider Ray = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Wrapped Freeze Ray = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Bubble Ray = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Medkit = [=[local tbl = {}

function tbl.new(shar)
	local PlayEquipAnimationOnHeal = true

	local arg1 = {
	PlayEquipAnimationOnHeal = PlayEquipAnimationOnHeal, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 28
	end

	arg1._Init()
	return arg1
end

return tbl]=],Laptop = [=[local tbl = {}

function tbl.new(shar)
	local PlayEquipAnimationOnHeal = true
	local _play_cat_gif_hash = 0
	local _cat_surface_gui = shar.ItemModel:WaitForChild("MedkitTop"):WaitForChild("Screen"):WaitForChild("CatGui")
	local _cat_image_label = shar._cat_surface_gui:WaitForChild("Frame"):WaitForChild("ImageLabel"):WaitForChild("Picture"):WaitForChild("ImageLabel")
	local _use_surface_gui = shar.ItemModel:WaitForChild("MedkitTop"):WaitForChild("Screen"):WaitForChild("UseGui")
	local _use_bar = shar._use_surface_gui:WaitForChild("Frame"):WaitForChild("Frame"):WaitForChild("Bar")
	local _use_text = shar._use_surface_gui:WaitForChild("Frame"):WaitForChild("Progress")
	local _use_background = shar._use_surface_gui:WaitForChild("Frame"):WaitForChild("ImageLabel")
	local _use_effect_hash = 0

	local arg1 = {
	PlayEquipAnimationOnHeal = PlayEquipAnimationOnHeal, 
	_play_cat_gif_hash = _play_cat_gif_hash, 
	_cat_surface_gui = _cat_surface_gui, 
	_cat_image_label = _cat_image_label, 
	_use_surface_gui = _use_surface_gui, 
	_use_bar = _use_bar, 
	_use_text = _use_text, 
	_use_background = _use_background, 
	_use_effect_hash = _use_effect_hash, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateUseBar() -- Line 48
		local var5
		if arg1._use_bar.AbsoluteSize.X <= 1 then
			var5 = "• • •"
		else
			var5 = math.floor(arg1._use_bar.AbsoluteSize.X / arg1._use_bar.Parent.AbsoluteSize.X * 100)..'%'
		end
		arg1._use_text.Text = var5
	end

	function arg1._UpdateUseGui() -- Line 52
		--[[ Upvalues[1]:
			[1]: _G.animLib (readonly)
		]]
		arg1._use_effect_hash += 1
		local _use_effect_hash_upvr = arg1._use_effect_hash
		local any_IsAnimationPlaying_result1 = arg1:IsAnimationPlaying("Use")
		local var9 = not any_IsAnimationPlaying_result1
		if not var9 then
			var9 = arg1:IsAnimationPlaying("UseQuick")
		end
		arg1._use_surface_gui.Enabled = any_IsAnimationPlaying_result1 or var9
		if not arg1._use_surface_gui.Enabled then
		else
			task.spawn(function() -- Line 64
				--[[ Upvalues[2]:
					[1]: arg1 (readonly)
					[2]: _use_effect_hash_upvr (readonly)
				]]
				while not arg1._destroyed and arg1._use_effect_hash == _use_effect_hash_upvr do
					arg1._use_background.Image = "rbxassetid://134936596399147"
					wait(0.1)
					if arg1._destroyed or arg1._use_effect_hash ~= _use_effect_hash_upvr then return end
					arg1._use_background.Image = "rbxassetid://115756225131937"
					wait(0.1)
				end
			end)
			arg1._use_bar.Size = UDim2.new(0, 0, 1, 0)
			if any_IsAnimationPlaying_result1 then
				wait(2)
				if arg1._destroyed or arg1._use_effect_hash ~= _use_effect_hash_upvr then
				else
					arg1._use_bar:TweenSize(UDim2.new(1, 0, 1, 0), "Out", "Linear", _G.animLib.Info[arg1.Info.Animations.Use].ActionTimestamp - 2, true)
				end
			end
			if var9 then
				wait(_G.animLib.Info[arg1.Info.Animations.UseQuick].ActionTimestamp)
				if arg1._destroyed or arg1._use_effect_hash ~= _use_effect_hash_upvr then return end
				arg1._use_bar.Size = UDim2.new(1, 0, 1, 0)
			end
		end
	end

	function arg1._UpdateCatGui() -- Line 101
		arg1._play_cat_gif_hash += 1
		arg1._cat_surface_gui.Enabled = arg1:IsAnimationPlaying("RareInspect")
		if not arg1._cat_surface_gui.Enabled then
		else
			local var11 = 1
			while not arg1._destroyed and arg1:IsAnimationPlaying("RareInspect") and arg1._play_cat_gif_hash == arg1._play_cat_gif_hash do
				arg1._cat_image_label.Position = UDim2.new((var11 - 1) % Vector3.new(4, 4, -2).X * -1, 0, math.floor((var11 - 1) / Vector3.new(4, 4, -2).Y) * -1, 0)
				wait(0.1)
			end
		end
	end

	function arg1._Setup() -- Line 129
		arg1._cat_image_label.Image = "rbxassetid://120426879154579"
		arg1._cat_image_label.Size = UDim2.new(arg1._cat_image_label.Size.X.Scale * Vector3.new(4, 4, -2).X, arg1._cat_image_label.Size.X.Offset * Vector3.new(4, 4, -2).X, arg1._cat_image_label.Size.Y.Scale * Vector3.new(4, 4, -2).Y, arg1._cat_image_label.Size.Y.Offset * Vector3.new(4, 4, -2).Y)
	end

	function arg1._Init() -- Line 141
		arg1.AnimationPlayed:Connect(function(arg1_2) -- Line 142
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1_2 == "RareInspect" then
				arg1:_UpdateCatGui()
			elseif arg1_2 == "Use" or arg1_2 == "UseQuick" then
				arg1:_UpdateUseGui()
			end
		end)
		arg1.AnimationStopped:Connect(function(arg1_3) -- Line 150
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1_3 == "RareInspect" then
				arg1:_UpdateCatGui()
			elseif arg1_3 == "Use" or arg1_3 == "UseQuick" then
				arg1:_UpdateUseGui()
			end
		end)
		arg1._use_bar:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() -- Line 158
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateUseBar()
		end)
		arg1:_Setup()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Sandwich = [=[local tbl = {}

function tbl.new(shar)
	local PlayEquipAnimationOnHeal = true

	local arg1 = {
	PlayEquipAnimationOnHeal = PlayEquipAnimationOnHeal, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Bucket of Candy = [=[local tbl = {}

function tbl.new(shar)
	local PlayEquipAnimationOnHeal = true

	local arg1 = {
	PlayEquipAnimationOnHeal = PlayEquipAnimationOnHeal, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Milk & Cookies = [=[local tbl = {}

function tbl.new(shar)
	local PlayEquipAnimationOnHeal = true

	local arg1 = {
	PlayEquipAnimationOnHeal = PlayEquipAnimationOnHeal, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Medkitty = [=[local tbl = {}

function tbl.new(shar)
	local PlayEquipAnimationOnHeal = true
	local PlayEquipAnimationOnHeal = false
	local _heal_particles_attachment = shar.ItemModel:WaitForChild("Head"):WaitForChild("Head"):WaitForChild("_medkitty_heal")

	local arg1 = {
	PlayEquipAnimationOnHeal = PlayEquipAnimationOnHeal, 
	PlayEquipAnimationOnHeal = PlayEquipAnimationOnHeal, 
	_heal_particles_attachment = _heal_particles_attachment, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 32
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		task.defer(function() -- Line 33
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: _G.utility (copied, readonly)
			]]
			table.insert(arg1._connections, arg1.ClientItem.AnimationReachedHealTimestamp:Connect(function() -- Line 34
				--[[ Upvalues[2]:
					[1]: _G.utility (copied, readonly)
					[2]: arg1 (copied, readonly)
				]]
				_G.utility:PlayParticles(arg1._heal_particles_attachment)
			end))
		end)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Sniper = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Keyper = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Event Horizon = [=[local tbl = {}

function tbl.new(shar)
	local _reload_start_attachment = shar.ItemModel:WaitForChild("Body"):WaitForChild("Black"):WaitForChild("Start")
	local _reload_finish_attachment = shar.ItemModel:WaitForChild("Body"):WaitForChild("Black"):WaitForChild("Finish")

	local arg1 = {
	_reload_start_attachment = _reload_start_attachment, 
	_reload_finish_attachment = _reload_finish_attachment, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 27
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1.PlayReloadStartParticles() -- Line 31
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		_G.utility:PlayParticles(arg1._reload_start_attachment)
	end

	function arg1.PlayReloadFinishParticles() -- Line 35
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		_G.utility:PlayParticles(arg1._reload_finish_attachment)
	end

	function arg1._Init() -- Line 43
	end

	arg1._Init()
	return arg1
end

return tbl]=],Shorty = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Demon Shorty = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],War Horn = [=[local tbl = {}

function tbl.new(shar)
	local _horn_particles = {}
	local _horn_particles_active = 0
	local _use_effect_attachment = shar.Model:FindFirstChild("_warhorn_use", true)

	local arg1 = {
	_horn_particles = _horn_particles, 
	_horn_particles_active = _horn_particles_active, 
	_use_effect_attachment = _use_effect_attachment, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.PlayHornEffect() -- Line 28
		--[[ Upvalues[1]:
			[1]: _G.animLib (readonly)
		]]
		arg1:_IncrementParticlesActive(1)
		task.delay(_G.animLib.Info[arg1.Info.Animations.Use].ActionTimestamp, arg1._IncrementParticlesActive, arg1, -1)
	end

	function arg1._IncrementParticlesActive(, arg2) -- Line 37
		arg1._horn_particles_active += arg2
		for _, v in pairs(arg1._horn_particles) do
			local var13
			if 0 >= arg1._horn_particles_active then
				var13 = false
			else
				var13 = true
			end
			v.Enabled = var13
		end
	end

	function arg1._Setup() -- Line 45
		--[[ Upvalues[1]:
			[1]: WarHornEffects_upvr (readonly)
		]]
		local SOME = WarHornEffects_upvr:FindFirstChild(arg1.Name)
		if not SOME then
			SOME = WarHornEffects_upvr.Default
		end
		for _, v_2 in pairs(SOME.Attachment:GetChildren()) do
			local clone = v_2:Clone()
			clone.Parent = arg1._use_effect_attachment
			table.insert(arg1._horn_particles, clone)
		end
	end

	function arg1._Init() -- Line 53
		arg1:_Setup()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Trumpet = [=[local tbl = {}

function tbl.new(shar)
	local _horn_particles = {}
	local _horn_particles_active = 0
	local _use_effect_attachment = shar.Model:FindFirstChild("_warhorn_use", true)

	local arg1 = {
	_horn_particles = _horn_particles, 
	_horn_particles_active = _horn_particles_active, 
	_use_effect_attachment = _use_effect_attachment, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Mammoth Horn = [=[local tbl = {}

function tbl.new(shar)
	local _horn_particles = {}
	local _horn_particles_active = 0
	local _use_effect_attachment = shar.Model:FindFirstChild("_warhorn_use", true)

	local arg1 = {
	_horn_particles = _horn_particles, 
	_horn_particles_active = _horn_particles_active, 
	_use_effect_attachment = _use_effect_attachment, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Megaphone = [=[local tbl = {}

function tbl.new(shar)
	local _horn_particles = {}
	local _horn_particles_active = 0
	local _use_effect_attachment = shar.Model:FindFirstChild("_warhorn_use", true)

	local arg1 = {
	_horn_particles = _horn_particles, 
	_horn_particles_active = _horn_particles_active, 
	_use_effect_attachment = _use_effect_attachment, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Air Horn = [=[local tbl = {}

function tbl.new(shar)
	local _horn_particles = {}
	local _horn_particles_active = 0
	local _use_effect_attachment = shar.Model:FindFirstChild("_warhorn_use", true)

	local arg1 = {
	_horn_particles = _horn_particles, 
	_horn_particles_active = _horn_particles_active, 
	_use_effect_attachment = _use_effect_attachment, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Elixir = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Scepter = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Battle Axe = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],The Shred = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Nordic Axe = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Ban Axe = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Cerulean Axe = [=[local tbl = {}

function tbl.new(shar)
	local _equip_effect_hash = 0
	local _vfx_attachment = shar.ItemModel:WaitForChild("Body"):WaitForChild("Gem"):WaitForChild("VFX")
	local _blade1 = shar.ItemModel:WaitForChild("Body"):WaitForChild("Blade1")
	local _blade2 = shar.ItemModel:WaitForChild("Body"):WaitForChild("Blade2")

	local arg1 = {
	_equip_effect_hash = _equip_effect_hash, 
	_vfx_attachment = _vfx_attachment, 
	_blade1 = _blade1, 
	_blade2 = _blade2, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.Unequip(, ...) -- Line 30
		--[[ Upvalues[1]:
			[1]: Battle Axe_upvr (readonly)
		]]
		arg1._equip_effect_hash += 1
		Battle Axe_upvr.Unequip(arg1, ...)
	end

	function arg1.Destroy() -- Line 35
		--[[ Upvalues[1]:
			[1]: Battle Axe_upvr (readonly)
		]]
		arg1._equip_effect_hash += 1
		Battle Axe_upvr.Destroy(arg1)
	end

	function arg1._EquipEffect(, arg2) -- Line 44
		--[[ Upvalues[1]:
			[1]: _G.utility (readonly)
		]]
		arg1._equip_effect_hash += 1
		local _equip_effect_hash = arg1._equip_effect_hash
		arg1:_LocalTransparencyModifier(arg1._blade1, "EquipEffect", 1)
		arg1:_LocalTransparencyModifier(arg1._blade2, "EquipEffect", 1)
		if not arg2 then
			wait(0.55)
		end
		if arg1._equip_effect_hash ~= _equip_effect_hash then
		else
			_G.utility:PlayParticles(arg1._vfx_attachment)
			arg1:CreateSound("rbxassetid://117746175185603", 0.5, 0.5 + 0.125 * math.random(), true, 0.3)
			if not arg2 then
				wait(0.3)
			end
			if arg1._equip_effect_hash ~= _equip_effect_hash then return end
			arg1:CreateSound("rbxassetid://75313977551180", 0.875, 1 + 0.2 * math.random(), true, 5)
			arg1:CreateSound("rbxassetid://107162559513589", 0.875, 1 + 0.2 * math.random(), true, 5)
			arg1:CreateSound("rbxassetid://115716079009988", 0.875, 1 + 0.2 * math.random(), true, 5)
			arg1:_LocalTransparencyModifier(arg1._blade1, "EquipEffect", 0)
			arg1:_LocalTransparencyModifier(arg1._blade2, "EquipEffect", 0)
		end
	end

	function arg1._Init() -- Line 78
		arg1.Equipped:Connect(function(arg1_2) -- Line 79
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_EquipEffect(arg1_2)
		end)
	end

	arg1._Init()
	return arg1
end

return tbl]=],BaseSatchel = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Satchel = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		task.defer(function() -- Line 27
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1.ClientItem.ProjectileThrown:Connect(function(arg1_2, arg2) -- Line 28
				--[[ Upvalues[1]:
					[1]: arg1 (copied, readonly)
				]]
				arg1:_PlayBeepAnimation(arg2:WaitForChild("Beep"))
			end)
		end)
		arg1:_RegisterBeepPart(arg1.ItemModel:WaitForChild("Body"):WaitForChild("Beep"))
	end

	arg1._Init()
	return arg1
end

return tbl]=],Advanced Satchel = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Suspicious Gift = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Notebook Satchel = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Bag o' Money = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],BaseDaggers = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateAmmoVisual() -- Line 29
		if arg1._destroyed then
		else
			for i, v in pairs(arg1._registered_ammo_visuals) do
				local var22 = true
				local var23
				if v > arg1.ClientItem:Get("Ammo") then
					var22 = arg1:IsAnimationPlaying("Reload")
				end
				if var22 then
					var23 = 0
				else
					var23 = 1
				end
				arg1:_LocalTransparencyModifier(i, "AmmoVisual", var23)
				if v == 2 then
					local var24
					if arg1._charm_pivot_attachment then
						local function INLINED_2() -- Internal function, doesn't exist in bytecode
							var24 = arg1._charm_attachment_parent
							return var24
						end
						if not var22 or not INLINED_2() then
							var24 = nil
						end
						arg1._charm_pivot_attachment.Parent = var24
					end
				end
			end
		end
	end

	function arg1._RegisterAmmoVisual(, arg2, arg3) -- Line 46
		arg1._registered_ammo_visuals[arg2] = arg3
	end

	function arg1._Init() -- Line 50
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 51
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.AnimationPlayed:Connect(function() -- Line 55
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		arg1.AnimationStopped:Connect(function() -- Line 59
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		task.spawn(arg1._UpdateAmmoVisual, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Daggers = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart1"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart2"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart1"), 2)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart2"), 2)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Aces = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart1"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart2"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart3"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart1"), 2)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart2"), 2)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart3"), 2)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Cookies = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		for i, v in pairs({"LeftBody", "RightBody"}) do
			for i_2 = 1, 7 do
				arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild(v):WaitForChild("MeshPart"..i_2), i)
			end
		end
	end

	arg1._Init()
	return arg1
end

return tbl]=],Crystal Daggers = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart"), 2)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Paper Planes = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart"), 2)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Shurikens = [=[local tbl = {}

function tbl.new(shar)
	local _registered_ammo_visuals = {}

	local arg1 = {
	_registered_ammo_visuals = _registered_ammo_visuals, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart1"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart2"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart1"), 2)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart2"), 2)
	end

	arg1._Init()
	return arg1
end

return tbl]=],BaseCrossbow = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Crossbow = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"), 1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Pixel Crossbow = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Feather"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"), 1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Frostbite Crossbow = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Tip"), 1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Harpoon Crossbow = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Fins"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Metal"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("Stick"), 1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Violin Crossbow = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("Arrow"):WaitForChild("MeshPart"), 1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Energy Pistols = [=[local tbl = {}

function tbl.new(shar)
	local EnergyPistolsShootSoundCooldown = 0

	local arg1 = {
	EnergyPistolsShootSoundCooldown = EnergyPistolsShootSoundCooldown, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 28
	end

	arg1._Init()
	return arg1
end

return tbl]=],Hacker Pistols = [=[local tbl = {}

function tbl.new(shar)
	local EnergyPistolsShootSoundCooldown = 0

	local arg1 = {
	EnergyPistolsShootSoundCooldown = EnergyPistolsShootSoundCooldown, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Apex Pistols = [=[local tbl = {}

function tbl.new(shar)
	local EnergyPistolsShootSoundCooldown = 0

	local arg1 = {
	EnergyPistolsShootSoundCooldown = EnergyPistolsShootSoundCooldown, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],2025 Energy Pistols = [=[local tbl = {}

function tbl.new(shar)
	local EnergyPistolsShootSoundCooldown = 0

	local arg1 = {
	EnergyPistolsShootSoundCooldown = EnergyPistolsShootSoundCooldown, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Void Pistols = [=[local tbl = {}

function tbl.new(shar)
	local EnergyPistolsShootSoundCooldown = 0

	local arg1 = {
	EnergyPistolsShootSoundCooldown = EnergyPistolsShootSoundCooldown, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Hydro Pistols = [=[local tbl = {}

function tbl.new(shar)
	local EnergyPistolsShootSoundCooldown = 0

	local arg1 = {
	EnergyPistolsShootSoundCooldown = EnergyPistolsShootSoundCooldown, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Energy Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetTracerTemplate() -- Line 22
		--[[ Upvalues[1]:
			[1]: EnergyBeamTracerEffect_upvr (readonly)
		]]
		return EnergyBeamTracerEffect_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Hacker Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetTracerTemplate() -- Line 22
		--[[ Upvalues[1]:
			[1]: HackerBeamTracerEffect_upvr (readonly)
		]]
		return HackerBeamTracerEffect_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Apex Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetTracerTemplate() -- Line 22
		--[[ Upvalues[1]:
			[1]: ApexBeamTracerEffect_upvr (readonly)
		]]
		return ApexBeamTracerEffect_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],2025 Energy Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetTracerTemplate() -- Line 22
		--[[ Upvalues[1]:
			[1]: 2025BeamTracerEffect_upvr (readonly)
		]]
		return 2025BeamTracerEffect_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Hydro Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Void Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetTracerTemplate() -- Line 22
		--[[ Upvalues[1]:
			[1]: VoidBeamTracerEffect_upvr (readonly)
		]]
		return VoidBeamTracerEffect_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Assault Rifle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],AKEY-47 = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1.PlayAimSound(, arg2) -- Line 26
		local var5
		if arg2 then
			var5 = 0.1
		else
			var5 = 0
		end
		var5 = 5
		arg1:CreateSound("rbxassetid://96253147006478", 0.375, 2 + var5, true, var5)
	end

	function arg1._Init() -- Line 34
	end

	arg1._Init()
	return arg1
end

return tbl]=],Tommy Gun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateDefaultAnimationsFromAmmo() -- Line 26
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var4
		if arg1.ClientItem:Get("Ammo") > 0 then
			var4 = false
		else
			var4 = true
		end
		if var4 == arg1._is_empty then
		else
			arg1._is_empty = var4
			if arg1._is_empty then
				local const_string = "Empty"
			else
			end
			arg1:ChangeEquipAnimation("Equip".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeIdleAnimation("Idle".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeSprintAnimation("Sprint".."")
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			arg1:ChangeInspectAnimation("Inspect".."")
		end
	end

	function arg1._Init() -- Line 44
		arg1.ClientItem:GetDataChangedSignal("AmmoReserve"):Connect(function() -- Line 45
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateDefaultAnimationsFromAmmo()
		end)
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 49
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateDefaultAnimationsFromAmmo()
		end)
		arg1:_UpdateDefaultAnimationsFromAmmo()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Molotov = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],Hot Coals = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1.Animator.AnimationStopped:Connect(function(arg1_2) -- Line 27
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			local any_GetEquipAnimationKey_result1 = arg1.Animator:GetEquipAnimationKey()
			if arg1_2 ~= any_GetEquipAnimationKey_result1 then
			else
				local any_GetAnimationTrack_result1 = arg1.Animator:GetAnimationTrack(any_GetEquipAnimationKey_result1)
				if any_GetAnimationTrack_result1 then
					any_GetAnimationTrack_result1:Stop(0)
				end
				local any_GetAnimationTrack_result1_2 = arg1.Animator:GetAnimationTrack(arg1.Animator:GetIdleAnimationKey())
				if any_GetAnimationTrack_result1_2 then
					any_GetAnimationTrack_result1_2:Stop(0)
					any_GetAnimationTrack_result1_2:Play(0)
				end
			end
		end)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Coffee = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Torch = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Lava Lamp = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.ExplosionEffect(, arg2, arg3) -- Line 22
		--[[ Upvalues[2]:
			[1]: Molotov_upvr (readonly)
			[2]: _G.utility (readonly)
		]]
		_G.utility:CreateSound("rbxassetid://100889848836357", 1, 1 + 0.25 * math.random(), Molotov_upvr.ExplosionEffect(arg1, arg2, arg3), true, 10)
	end

	function arg1._Init() -- Line 31
	end

	arg1._Init()
	return arg1
end

return tbl]=],Vexed Candle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Riot Shield = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.AbsorbedHit() -- Line 20
		arg1:CreateSound("rbxassetid://131693414206770", 1, 0.9 + 0.2 * math.random(), true, 5)
	end

	function arg1._Init() -- Line 28
	end

	arg1._Init()
	return arg1
end

return tbl]=],Energy Shield = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.AbsorbedHit() -- Line 22
		arg1:CreateSound("rbxassetid://110086876051279", 1, 0.9 + 0.2 * math.random(), true, 5)
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Door = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Sled = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Masterpiece = [=[local tbl = {}

function tbl.new(shar)
	local _painting_data = tbl_upvr[math.random(#tbl_upvr)]

	local arg1 = {
	_painting_data = _painting_data, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetImage() -- Line 29
		return arg1._painting_data[2]
	end

	function arg1.AbsorbedHit() -- Line 33
		arg1:CreateSound("rbxassetid://134671375134755", 1, 0.9 + 0.2 * math.random(), true, 5)
	end

	function arg1._Setup() -- Line 41
		arg1.ItemModel:WaitForChild("Body"):WaitForChild("Canvas"):WaitForChild("Decal").Texture = arg1._painting_data[1]
	end

	function arg1._Init() -- Line 45
		arg1:_Setup()
	end

	arg1._Init()
	return arg1
end

return tbl]=],Knife = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Balisong = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1.Animator:OverridePreviousAnimationsOnPlay(true)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Spray = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Spray Bottle = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.GetFriendlyTracerColor() -- Line 22
		--[[ Upvalues[1]:
			[1]: ColorSequence_new_result1_upvr (readonly)
		]]
		return ColorSequence_new_result1_upvr
	end

	function arg1._Init() -- Line 30
	end

	arg1._Init()
	return arg1
end

return tbl]=],Gunblade = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Gunsaw = [=[local tbl = {}

function tbl.new(shar)
	local _spike_toggle = false
	local _next_toggle = 0
	local _spikes1 = shar.ItemModel:WaitForChild("Body"):WaitForChild("Spikes1")
	local _spikes2 = shar.ItemModel:WaitForChild("Body"):WaitForChild("Spikes2")

	local arg1 = {
	_spike_toggle = _spike_toggle, 
	_next_toggle = _next_toggle, 
	_spikes1 = _spikes1, 
	_spikes2 = _spikes2, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1.Update(, arg2, arg3, arg4) -- Line 27
		--[[ Upvalues[1]:
			[1]: Gunblade_upvr (readonly)
		]]
		Gunblade_upvr.Update(arg1, arg2, arg3, arg4)
		local var4
		if not arg4.IsActive then
		else
			if tick() < arg1._next_toggle then return end
			arg1._next_toggle = tick() + 0.03
			arg1._spike_toggle = not arg1._spike_toggle
			if arg1._spike_toggle then
				var4 = 0
			else
				var4 = 1
			end
			arg1:_LocalTransparencyModifier(arg1._spikes1, "Update", var4)
			if arg1._spike_toggle then
				var4 = 1
			else
				var4 = 0
			end
			arg1:_LocalTransparencyModifier(arg1._spikes2, "Update", var4)
		end
	end

	function arg1._PlayIdleSound() -- Line 48
		local any_CreateSound_result1 = arg1:CreateSound("rbxassetid://13645858587", 0.375, 1, true, nil, 10, 40)
		if any_CreateSound_result1 then
			any_CreateSound_result1.Looped = true
		end
		local any_CreateSound_result1_2 = arg1:CreateSound("rbxassetid://13646484249", 0.375, 1, true, nil, 10, 40)
		if any_CreateSound_result1_2 then
			any_CreateSound_result1_2.Looped = true
		end
		local any_CreateSound_result1_3 = arg1:CreateSound("rbxassetid://13646484113", 0.25, 1, true, nil, 10, 40)
		if any_CreateSound_result1_3 then
			any_CreateSound_result1_3.Looped = true
		end
	end

	function arg1._Init() -- Line 68
		arg1.Equipped:Connect(function() -- Line 69
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_PlayIdleSound()
		end)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Glass Cannon = [=[local tbl = {}

function tbl.new(shar)
	local _hide_this_mesh = shar.ItemModel:WaitForChild("Body"):WaitForChild("MeshPart")

	local arg1 = {
	_hide_this_mesh = _hide_this_mesh, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._UpdateAmmoVisual() -- Line 28
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var4
		if var4 then
		else
			if 0 >= arg1.ClientItem:Get("Ammo") then
				var4 = false
			else
				var4 = true
			end
			if not var4 or not Enum.Material.Glass then
			end
			arg1._hide_this_mesh.Material = Enum.Material.SmoothPlastic
			if var4 then
			else
			end
			arg1:_LocalTransparencyModifier(arg1._hide_this_mesh, "AmmoVisual", 1)
		end
	end

	function arg1._Init() -- Line 39
		arg1.ClientItem:GetDataChangedSignal("Ammo"):Connect(function() -- Line 40
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:_UpdateAmmoVisual()
		end)
		task.spawn(arg1._UpdateAmmoVisual, arg1)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Daggers = [=[local tbl = {}

function tbl.new(shar)
	local _hide_this_mesh = shar.ItemModel:WaitForChild("Body"):WaitForChild("MeshPart")

	local arg1 = {
	_hide_this_mesh = _hide_this_mesh, 
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart1"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("LeftBody"):WaitForChild("MeshPart2"), 1)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart1"), 2)
		arg1:_RegisterAmmoVisual(arg1.ItemModel:WaitForChild("RightBody"):WaitForChild("MeshPart2"), 2)
	end

	arg1._Init()
	return arg1
end

return tbl]=],Shotgun = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	function arg1._Init() -- Line 26
	end

	arg1._Init()
	return arg1
end

return tbl]=],Shotkey = [=[local tbl = {}

function tbl.new(shar)

	local arg1 = {
	}
	
for name, v in pairs(shar) do
	arg1[name]=v
end
	
	arg1._Init()
	return arg1
end

return tbl]=],}
